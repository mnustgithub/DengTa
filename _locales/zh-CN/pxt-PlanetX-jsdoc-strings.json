{
  "PlanetX_AILens": "This extension is designed to programme and drive the Smart AI Lens(二郎神)",
  "PlanetX_AILens.Ballstatus": "Status List of Ball",
  "PlanetX_AILens.CardData": "TODO: Card parameters in the screen",
  "PlanetX_AILens.CardData|param|status": "otherCards, eg: Cardstatus.X",
  "PlanetX_AILens.Cardstatus": "Status List of Card",
  "PlanetX_AILens.ColorLs": "Status List of Color",
  "PlanetX_AILens.Colorstatus": "Status List of Color",
  "PlanetX_AILens.Facestatus": "Status List of Face",
  "PlanetX_AILens.FuncList": "Status List of Ball",
  "PlanetX_AILens.ballData": "TODO: In the image get ball(s)' info",
  "PlanetX_AILens.cameraImage": "TODO: Get the image in a frame",
  "PlanetX_AILens.checkBall": "TODO: Judge the image contains a ball",
  "PlanetX_AILens.checkFace": "TODO: Judge whether there is a face in the picture",
  "PlanetX_AILens.colorCheck": "TODO: Judge whether there is a color in the screen",
  "PlanetX_AILens.colorCheck|param|status": "ColorLs, eg: ColorLs.red",
  "PlanetX_AILens.colorData": "TODO: color parameters in the screen",
  "PlanetX_AILens.colorData|param|status": "Colorstatus, eg: Colorstatus.X",
  "PlanetX_AILens.faceData": "TODO: Judge whether there is a face in the picture",
  "PlanetX_AILens.faceData|param|status": "Facestatus, eg: Facestatus.X",
  "PlanetX_AILens.initModule": "TODO: Waiting for module initialize.",
  "PlanetX_AILens.learnObject": "TODO: Learn an object in a picture",
  "PlanetX_AILens.learnObject|param|thingsID": "Edit a label for the object, eg: 1",
  "PlanetX_AILens.letterCard": "TODO: Judge whether there is a letter card in the screen",
  "PlanetX_AILens.letterCard|param|status": "letterCards, eg: letterCards.A",
  "PlanetX_AILens.lineData": "TODO: line parameters in the screen",
  "PlanetX_AILens.lineData|param|status": "Linestatus, eg: Linestatus.angle",
  "PlanetX_AILens.lineDirection": "TODO: line parameters in the screen",
  "PlanetX_AILens.lineDirection|param|status": "Linestatus, eg: Linestatus.angle",
  "PlanetX_AILens.numberCard": "TODO: Judge whether there is a digital card in the screen",
  "PlanetX_AILens.numberCards": "Number Cards List",
  "PlanetX_AILens.numberCard|param|status": "numberCards, eg: numberCards.1",
  "PlanetX_AILens.objectCheck": "TODO: Judge whether there are any learned objects in the picture",
  "PlanetX_AILens.objectConfidence": "TODO: Judge whether there are any learned objects in the picture",
  "PlanetX_AILens.otherCard": "TODO: Judge whether there is a other card in the screen",
  "PlanetX_AILens.otherCard|param|status": "otherCards, eg: otherCards.cat",
  "PlanetX_AILens.switchfunc": "TODO: Switch recognition objects.",
  "PlanetX_AILens.switchfunc|param|fun": "Function list eg: FuncList.Face",
  "PlanetX_AILens.trafficCard": "TODO: Judge whether there is a traffic card in the screen",
  "PlanetX_AILens.trafficCard|param|status": "trafficCards, eg: trafficCards.forward",
  "PlanetX_Basic": "Functions to PlanetX sensor by ELECFREAKS Co.,Ltd.",
  "PlanetX_Basic.Crash": "check crash",
  "PlanetX_Basic.Dust": "get dust value (μg/m³)",
  "PlanetX_Basic.Dust|param|Rjpin": "describe parameter here, eg: Rjpin.J1",
  "PlanetX_Basic.GestureType": "Gestures",
  "PlanetX_Basic.MP3SetPort": "TODO: Initializing the MP3 connection port as a serial port",
  "PlanetX_Basic.PIR": "TODO: Detect soil moisture value(0~100%)",
  "PlanetX_Basic.PM25": "TODO: get pm2.5 value (μg/m³)",
  "PlanetX_Basic.Relay": "toggle Relay",
  "PlanetX_Basic.UVLevel": "get UV level value (0~15)",
  "PlanetX_Basic.UnitList": "Unit of temperature",
  "PlanetX_Basic.dht11Sensor": "get dht11 temperature and humidity Value",
  "PlanetX_Basic.execute": "TODO: Perform playback or other",
  "PlanetX_Basic.execute|param|myType": "Left wheel speed , eg: playType.Play",
  "PlanetX_Basic.folderPlay": "TODO: Specify songs in the play folder",
  "PlanetX_Basic.folderPlay|param|fileNum": "Specify a song , eg: 0",
  "PlanetX_Basic.folderPlay|param|folderNum": "Specify a floder , eg: 0",
  "PlanetX_Basic.folderPlay|param|myAns": "repeat , eg: repeatList.Yes",
  "PlanetX_Basic.laserSensor": "toggle laserSensor",
  "PlanetX_Basic.lightSensor": "TODO: get light intensity(lux)",
  "PlanetX_Basic.motorFan": "toggle fans",
  "PlanetX_Basic.noiseSensor": "TODO: get noise(dB)",
  "PlanetX_Basic.onGesture": "Do something when a gesture is detected",
  "PlanetX_Basic.onGesture|param|gesture": "type of gesture to detect",
  "PlanetX_Basic.onGesture|param|handler": "code to run",
  "PlanetX_Basic.setLoopFolder": "TODO: Loop songs in folders",
  "PlanetX_Basic.setLoopFolder|param|folderNum": "Specify a floder , eg: 0",
  "PlanetX_Basic.setTracking": "TODO: Specify a song to play",
  "PlanetX_Basic.setTracking|param|myAns": "repeat , eg: repeatList.Yes",
  "PlanetX_Basic.setTracking|param|tracking": "Specify a song , eg: 0",
  "PlanetX_Basic.setVolume": "TODO: Set volume",
  "PlanetX_Basic.soilHumidity": "TODO: get soil moisture(0~100%)",
  "PlanetX_Basic.targetList": "List of detected targets",
  "PlanetX_Basic.trackingSensor": "TODO: line following",
  "PlanetX_Basic.ultrasoundSensor": "get Ultrasonic distance",
  "PlanetX_Basic.waterLevel": "get water level value (0~100)",
  "PlanetX_Display": "Functions to PlanetX sensor by ELECFREAKS Co.,Ltd.",
  "PlanetX_Display.NeoPixelMode": "Different modes for RGB or RGB+W NeoPixel strips",
  "PlanetX_Display.Strip.clear": "Turn off all LEDs.\nYou need to call ``show`` to make the changes visible.",
  "PlanetX_Display.Strip.range": "Create a range of LEDs.",
  "PlanetX_Display.Strip.range|param|length": "number of LEDs in the range. eg: 4",
  "PlanetX_Display.Strip.range|param|start": "offset in the LED strip to start the range",
  "PlanetX_Display.Strip.rotate": "Rotate LEDs forward.\nYou need to call ``show`` to make the changes visible.",
  "PlanetX_Display.Strip.rotate|param|offset": "number of pixels to rotate forward, eg: 1",
  "PlanetX_Display.Strip.setBrightness": "Set the brightness of the strip. This flag only applies to future operation.",
  "PlanetX_Display.Strip.setBrightness|param|brightness": "a measure of LED brightness in 0-255. eg: 255",
  "PlanetX_Display.Strip.setPin": "Set the pin where the neopixel is connected, defaults to P0.",
  "PlanetX_Display.Strip.setPixelColor": "Set LED to a given color (range 0-255 for r, g, b).\nYou need to call ``show`` to make the changes visible.",
  "PlanetX_Display.Strip.setPixelColor|param|pixeloffset": "position of the NeoPixel in the strip",
  "PlanetX_Display.Strip.setPixelColor|param|rgb": "RGB color of the LED",
  "PlanetX_Display.Strip.shift": "Shift LEDs forward and clear with zeros.\nYou need to call ``show`` to make the changes visible.",
  "PlanetX_Display.Strip.shift|param|offset": "number of pixels to shift forward, eg: 1",
  "PlanetX_Display.Strip.show": "Send all the changes to the strip.",
  "PlanetX_Display.Strip.showColor": "Shows all LEDs to a given color (range 0-255 for r, g, b).",
  "PlanetX_Display.Strip.showColor|param|rgb": "RGB color of the LED",
  "PlanetX_Display.Strip.showRainbow": "Shows a rainbow pattern on all LEDs.",
  "PlanetX_Display.Strip.showRainbow|param|endHue": "the end hue value for the rainbow, eg: 360",
  "PlanetX_Display.Strip.showRainbow|param|startHue": "the start hue value for the rainbow, eg: 1",
  "PlanetX_Display.TM1637LEDs._dat": "set data to TM1637, with given bit",
  "PlanetX_Display.TM1637LEDs._start": "Start",
  "PlanetX_Display.TM1637LEDs._stop": "Stop",
  "PlanetX_Display.TM1637LEDs._write_byte": "send a byte to 2-wire interface",
  "PlanetX_Display.TM1637LEDs._write_data_cmd": "send command1",
  "PlanetX_Display.TM1637LEDs._write_dsp_ctrl": "send command3",
  "PlanetX_Display.TM1637LEDs.clear": "clear LED.",
  "PlanetX_Display.TM1637LEDs.init": "initial TM1637",
  "PlanetX_Display.TM1637LEDs.showDP": "show or hide dot point.",
  "PlanetX_Display.TM1637LEDs.showDP|param|bit": "is the position, eg: 1",
  "PlanetX_Display.TM1637LEDs.showDP|param|show": "is show/hide dp, eg: true",
  "PlanetX_Display.TM1637LEDs.showNumber": "Show a 4 digits number on display",
  "PlanetX_Display.TM1637LEDs.showbit": "Show a single number from 0 to 9 at a specified digit of Grove - 4-Digit Display",
  "PlanetX_Display.colors": "Gets the RGB value of a known color",
  "PlanetX_Display.create": "Create a new NeoPixel driver for `numleds` LEDs.",
  "PlanetX_Display.create|param|numleds": "number of leds in the strip, eg: 24,30,60,64",
  "PlanetX_Display.hsl": "Converts a hue saturation luminosity value into a RGB color",
  "PlanetX_Display.hsl|param|h": "hue from 0 to 360",
  "PlanetX_Display.hsl|param|l": "luminosity from 0 to 99",
  "PlanetX_Display.hsl|param|s": "saturation from 0 to 99",
  "PlanetX_Display.ledBrightness": "toggle led",
  "PlanetX_Display.rgb": "Converts red, green, blue channels into a RGB color",
  "PlanetX_Display.rgb|param|blue": "value of the blue channel between 0 and 255. eg: 255",
  "PlanetX_Display.rgb|param|green": "value of the green channel between 0 and 255. eg: 255",
  "PlanetX_Display.rgb|param|red": "value of the red channel between 0 and 255. eg: 255",
  "PlanetX_Display.tm1637Create": "Create a new driver Grove - 4-Digit Display",
  "PlanetX_IOT.connectKidsiot": "Connect to kitsiot",
  "PlanetX_IOT.connectThingSpeak": "Connect to ThingSpeak",
  "PlanetX_IOT.connectWifi": "connect to Wifi router",
  "PlanetX_IOT.disconnectKidsiot": "disconnect from kitsiot",
  "PlanetX_IOT.initWIFI": "Initialize ESP8266 module",
  "PlanetX_IOT.kidsiotState": "Check if ESP8266 successfully connected to KidsIot",
  "PlanetX_IOT.setData": "Connect to ThingSpeak and set data.",
  "PlanetX_IOT.thingSpeakState": "Check if ESP8266 successfully connected to ThingSpeak",
  "PlanetX_IOT.tsLastUploadState": "Check if ESP8266 successfully uploaded data to ThingSpeak",
  "PlanetX_IOT.uploadData": "upload data. It would not upload anything if it failed to connect to Wifi or ThingSpeak.",
  "PlanetX_IOT.uploadKidsiot": "upload data to kitsiot",
  "PlanetX_IOT.wait": "Wait between uploads",
  "PlanetX_IOT.wifiState": "Check if ESP8266 successfully connected to Wifi"
}